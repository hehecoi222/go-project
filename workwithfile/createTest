package main

import (
	"encoding/json"
	"os"
)

type testIn []struct {
	N int `json:"N"` //Change me
}

type testOut []struct {
	Output string `json:"Output"` //Change me
}

// Put func here
func is_palindrome(n int) string {
	x := []int{}
	for n/10 != 0 {
		x = append(x, n%10)
		n /= 10
	}
	x = append(x, n)
	for i := 0; i < (len(x) / 2); i++ {
		if x[i] != x[len(x)-1] {
			return "No"
		}
	}
	return "Yes"
}

// End func

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func workFile() testIn {
	fi, e := os.Open("testIn.json")
	check(e)
	defer fi.Close()

	var testIn testIn

	Decod := json.NewDecoder(fi)
	Decod.Decode(&testIn)
	return testIn
}

func writeFile(testOut testOut) {
	fo, e := os.Create("testOut.json")
	check(e)
	defer fo.Close()
	Encod := json.NewEncoder(fo)
	Encod.Encode(testOut)
}

func main() {
	testIn := workFile()
	testOut := make(testOut, len(testIn))
	for i := range testIn {
		testOut[i].Output = is_palindrome(testIn[i].N)
	}
	writeFile(testOut)
}
